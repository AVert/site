#!/usr/bin/env ruby
require 'bundler'
require 'logger'
Bundler.require

Dir['models/*.rb'].each { |file| require File.join Dir.pwd, file }

DataMapper.setup(:default, ENV['DATABASE_URL'] || "sqlite://#{Dir.pwd}/development.db")
DataMapper.finalize

module CallListener

  def post_init
    Fiber.new do
      connection_headers = command('connect')
      operator_uuid = connection_headers['Caller-Unique-ID']

      command("events plain all")
      # command("filter Unique-ID #{operator_uuid}")
      command("filter Core-UUID #{operator_uuid}")
      command("filter Event-Name CHANNEL_ANSWER")
      command("filter Event-Name CHANNEL_HANGUP")

      rack_sid = connection_headers['Channel-Destination-Number']

      rack_session = Rack::Session::Redis.new(nil)
      rack = rack_session.get_session({}, rack_sid).last

      user = Identity.get rack['user_id']
      unless user.nil?
        company = Company.get rack['calling_to_company_id']

        target_contact = company.targets.target_contacts.first(status: nil)
        unless target_contact.nil?

          rack['target_contact_id'] = target_contact.id
          rack_session.set_session({}, rack_sid, rack, {})

          puts "Bridging #{user.name} with #{target_contact.phone}"
          bridge("sofia/external/#{target_contact.phone}@sip.zadarma.com")

          loop do
            event_headers = listen
            if event_headers['Content-Type'] == "text/disconnect-notice"
              break
            elsif event_headers['Event-Name'] == "CHANNEL_ANSWER"
              # in case uuid is same as operator_uuid, skip to next CHANNEL_ANSWER
              target_call_uuid = event_headers['Caller-Unique-ID']
              bridged_call operator_uuid, target_call_uuid
              command "uuid_kill #{target_call_uuid}"
              break
            elsif event_headers['Event-Name'] == "CHANNEL_HANGUP"
              break
            end
          end

        end
      end

      command "uuid_kill #{operator_uuid}"
      close_connection_after_writing
    end.resume
  end

  def bridged_call operator_uuid, target_call_uuid
    loop do
      event_headers = listen
      if event_headers['Content-Type'] == "text/disconnect-notice"
        break
      elsif event_headers['Event-Name'] == "CHANNEL_HANGUP"
        break
      end
    end
  end

  def bridge phone
  command <<-BRIDGE
sendmsg
call-command: execute
execute-app-name: bridge
execute-app-arg: #{phone}\n\n
BRIDGE
  end

  def listen
    @current_fiber = Fiber.current
    Fiber.yield
  end

  def command data
    send_data "#{data}\n\n"

    @current_fiber = Fiber.current
    Fiber.yield
  end

  def receive_data data
    headers = data.split(/\n/).inject({}) do |hash, row|
      ri = row.index(': ')
      hash[row[0..(ri-1)]] = row[(ri+2)..-1] unless ri.nil?
      hash
    end
    content_length = Integer(headers['Content-Length']) rescue nil
    # headers['Body'] = data[(data.size-content_length)..-1] if content_length
    @current_fiber.resume headers if @current_fiber && @current_fiber.alive?
  end
end

EM.run do
  EventMachine.start_server '127.0.0.1', 8084, CallListener
end
