#!/usr/bin/env ruby
require 'bundler'
require 'logger'
Bundler.require

Dir['models/*.rb'].each { |file| require File.join Dir.pwd, file }

DataMapper.setup(:default, ENV['DATABASE_URL'] || "sqlite://#{Dir.pwd}/development.db")
DataMapper.finalize

module Librevox
  module Listener
    class Outbound
      def send_data data
        STDOUT.puts "SEND DATA #{data}"
        super
      end

      def receive_request header, content
    STDOUT.puts "RECV: #{header[0]}" #['Event-Name'] #, content
        # STDOUT.puts content #header #, content
        super
      end
    end
  end
end

class CallListener < Librevox::Listener::Outbound
  event :channel_answer do |e|
    puts "answered"
    # playback "/home/pirj/file.wav" do
    #   puts "playing"
    # end
  end

  event :channel_bridge do |e|
    puts "bridged!"
    # sleep 3
    puts "deflecting"
    deflect "sofia/external/+78124569440@sip.zadarma.com"
    puts "deflected"
  end

  event :channel_unbridge do |e|
    puts "unbridged!"
    hangup
  end

  event :channel_hangup do |e|
    puts "hup!"
  end

  def on_event e
    # puts e.inspect
  end

  def session_initiated
    rack_session = Rack::Session::Redis.new(nil)
    rack = rack_session.get_session({}, session[:channel_destination_number]).last

    user = Identity.get rack['user_id']
    (hangup; return) if user.nil?

    company = Company.get rack['calling_to_company_id']

    target_contact = company.targets.target_contacts.first(status: nil)
    (hangup; return) if target_contact.nil?

    rack['target_contact_id'] = target_contact.id
    rack_session.set_session({}, session[:channel_destination_number], rack, {})

    bridge "sofia/external/#{target_contact.phone}@sip.zadarma.com"
  end
end

EM.run do
  Librevox.start CallListener, :host => '127.0.0.1', :port => '8084'
end
