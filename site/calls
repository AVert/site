#!/usr/bin/env ruby
require 'bundler'
require 'logger'
Bundler.require

Dir['models/*.rb'].each { |file| require File.join Dir.pwd, file }

DataMapper.setup(:default, ENV['DATABASE_URL'] || "sqlite://#{Dir.pwd}/development.db")
DataMapper.finalize

module CallListener

  def post_init
    Fiber.new do
      connection_headers = command('connect')
      caller_uuid = connection_headers['Caller-Unique-ID']
      puts "caller_uuid = [#{caller_uuid}]"

      rack_sid = connection_headers['Channel-Destination-Number']
      rack_session = Rack::Session::Redis.new(nil)
      rack = rack_session.get_session({}, rack_sid).last

      user = Identity.get rack['user_id']
      (hangup; return) if user.nil?

      company = Company.get rack['calling_to_company_id']

      target_contact = company.targets.target_contacts.first(status: nil)
      (hangup; return) if target_contact.nil?

      rack['target_contact_id'] = target_contact.id
      rack_session.set_session({}, rack_sid, rack, {})


      command("filter Unique-ID #{caller_uuid}")

      puts command(bridge("sofia/external/+79643857131@sip.zadarma.com"))

#     STDOUT.puts "in"

#       api.originate2 target_contact.phone, uuid do
#         command "filter Unique-ID #{uuid}"
#         puts "originated"
#         # answer do
#         #   puts "answered"
#         # end
#       end
#     end
#     # answer
#     # bridge "sofia/external/#{target_contact.phone}@sip.zadarma.com" do
#     #   STDOUT.puts "fd;uaierohgaweiroahszoiahjzshoeofish"
#     # end
#   end

#     send_data <<-BRIDGE
# sendmsg
# call-command: execute
# execute-app-name: bridge
# execute-app-arg: sofia/external/+79643857131@sip.zadarma.com\n\n
# BRIDGE
    end.resume
  end

  def bridge phone
<<-BRIDGE
sendmsg
call-command: execute
execute-app-name: bridge
execute-app-arg: #{phone}\n\n
BRIDGE
  end

  def command data
    send_data "#{data}\n\n"

    @current_fiber = Fiber.current
    Fiber.yield
  end

  def receive_data data
    headers = data.split(/\n/).inject({}) do |hash, row|
      ri = row.index(': ')
      hash[row[0..(ri-1)]] = row[(ri+2)..-1] unless ri.nil?
      hash
    end
    @current_fiber.resume headers if @current_fiber && @current_fiber.alive?
  end

  def send_data data
    puts "SENT: #{data}"
    super
  end
end

EM.run do
  EventMachine.start_server '127.0.0.1', 8084, CallListener
end
